/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.alain.monetizacion.model.impl;

import com.alain.monetizacion.model.Role_Config;
import com.alain.monetizacion.model.Role_ConfigModel;
import com.alain.monetizacion.service.persistence.Role_ConfigPK;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the Role_Config service. Represents a row in the &quot;MT_Role_Config&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.alain.monetizacion.model.Role_ConfigModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link Role_ConfigImpl}.
 * </p>
 *
 * @author Alain
 * @see Role_ConfigImpl
 * @see com.alain.monetizacion.model.Role_Config
 * @see com.alain.monetizacion.model.Role_ConfigModel
 * @generated
 */
public class Role_ConfigModelImpl extends BaseModelImpl<Role_Config>
	implements Role_ConfigModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a role_ config model instance should use the {@link com.alain.monetizacion.model.Role_Config} interface instead.
	 */
	public static final String TABLE_NAME = "MT_Role_Config";
	public static final Object[][] TABLE_COLUMNS = {
			{ "roleId", Types.BIGINT },
			{ "configurationId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table MT_Role_Config (roleId LONG not null,configurationId LONG not null,primary key (roleId, configurationId))";
	public static final String TABLE_SQL_DROP = "drop table MT_Role_Config";
	public static final String ORDER_BY_JPQL = " ORDER BY role_Config.id.roleId ASC, role_Config.id.configurationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MT_Role_Config.roleId ASC, MT_Role_Config.configurationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.alain.monetizacion.model.Role_Config"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.alain.monetizacion.model.Role_Config"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.column.bitmask.enabled.com.alain.monetizacion.model.Role_Config"),
			true);
	public static long CONFIGURATIONID_COLUMN_BITMASK = 1L;
	public static long ROLEID_COLUMN_BITMASK = 2L;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.alain.monetizacion.model.Role_Config"));

	public Role_ConfigModelImpl() {
	}

	@Override
	public Role_ConfigPK getPrimaryKey() {
		return new Role_ConfigPK(_roleId, _configurationId);
	}

	@Override
	public void setPrimaryKey(Role_ConfigPK primaryKey) {
		setRoleId(primaryKey.roleId);
		setConfigurationId(primaryKey.configurationId);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return new Role_ConfigPK(_roleId, _configurationId);
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey((Role_ConfigPK)primaryKeyObj);
	}

	@Override
	public Class<?> getModelClass() {
		return Role_Config.class;
	}

	@Override
	public String getModelClassName() {
		return Role_Config.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("roleId", getRoleId());
		attributes.put("configurationId", getConfigurationId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long roleId = (Long)attributes.get("roleId");

		if (roleId != null) {
			setRoleId(roleId);
		}

		Long configurationId = (Long)attributes.get("configurationId");

		if (configurationId != null) {
			setConfigurationId(configurationId);
		}
	}

	@Override
	public long getRoleId() {
		return _roleId;
	}

	@Override
	public void setRoleId(long roleId) {
		_roleId = roleId;
	}

	@Override
	public long getConfigurationId() {
		return _configurationId;
	}

	@Override
	public void setConfigurationId(long configurationId) {
		_columnBitmask |= CONFIGURATIONID_COLUMN_BITMASK;

		if (!_setOriginalConfigurationId) {
			_setOriginalConfigurationId = true;

			_originalConfigurationId = _configurationId;
		}

		_configurationId = configurationId;
	}

	public long getOriginalConfigurationId() {
		return _originalConfigurationId;
	}

	public long getColumnBitmask() {
		return _columnBitmask;
	}

	@Override
	public Role_Config toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (Role_Config)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		Role_ConfigImpl role_ConfigImpl = new Role_ConfigImpl();

		role_ConfigImpl.setRoleId(getRoleId());
		role_ConfigImpl.setConfigurationId(getConfigurationId());

		role_ConfigImpl.resetOriginalValues();

		return role_ConfigImpl;
	}

	@Override
	public int compareTo(Role_Config role_Config) {
		Role_ConfigPK primaryKey = role_Config.getPrimaryKey();

		return getPrimaryKey().compareTo(primaryKey);
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof Role_Config)) {
			return false;
		}

		Role_Config role_Config = (Role_Config)obj;

		Role_ConfigPK primaryKey = role_Config.getPrimaryKey();

		if (getPrimaryKey().equals(primaryKey)) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return getPrimaryKey().hashCode();
	}

	@Override
	public void resetOriginalValues() {
		Role_ConfigModelImpl role_ConfigModelImpl = this;

		role_ConfigModelImpl._originalConfigurationId = role_ConfigModelImpl._configurationId;

		role_ConfigModelImpl._setOriginalConfigurationId = false;

		role_ConfigModelImpl._columnBitmask = 0;
	}

	@Override
	public CacheModel<Role_Config> toCacheModel() {
		Role_ConfigCacheModel role_ConfigCacheModel = new Role_ConfigCacheModel();

		role_ConfigCacheModel.roleId = getRoleId();

		role_ConfigCacheModel.configurationId = getConfigurationId();

		return role_ConfigCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(5);

		sb.append("{roleId=");
		sb.append(getRoleId());
		sb.append(", configurationId=");
		sb.append(getConfigurationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(10);

		sb.append("<model><model-name>");
		sb.append("com.alain.monetizacion.model.Role_Config");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>roleId</column-name><column-value><![CDATA[");
		sb.append(getRoleId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configurationId</column-name><column-value><![CDATA[");
		sb.append(getConfigurationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = Role_Config.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			Role_Config.class
		};
	private long _roleId;
	private long _configurationId;
	private long _originalConfigurationId;
	private boolean _setOriginalConfigurationId;
	private long _columnBitmask;
	private Role_Config _escapedModel;
}