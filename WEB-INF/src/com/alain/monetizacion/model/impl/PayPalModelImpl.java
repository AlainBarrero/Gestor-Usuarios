/**
 * Copyright (c) 2000-present Liferay, Inc. All rights reserved.
 *
 * This library is free software; you can redistribute it and/or modify it under
 * the terms of the GNU Lesser General Public License as published by the Free
 * Software Foundation; either version 2.1 of the License, or (at your option)
 * any later version.
 *
 * This library is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS
 * FOR A PARTICULAR PURPOSE. See the GNU Lesser General Public License for more
 * details.
 */

package com.alain.monetizacion.model.impl;

import com.alain.monetizacion.model.PayPal;
import com.alain.monetizacion.model.PayPalModel;

import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.HashMap;
import java.util.Map;

/**
 * The base model implementation for the PayPal service. Represents a row in the &quot;MT_PayPal&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link com.alain.monetizacion.model.PayPalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PayPalImpl}.
 * </p>
 *
 * @author Alain
 * @see PayPalImpl
 * @see com.alain.monetizacion.model.PayPal
 * @see com.alain.monetizacion.model.PayPalModel
 * @generated
 */
public class PayPalModelImpl extends BaseModelImpl<PayPal>
	implements PayPalModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pay pal model instance should use the {@link com.alain.monetizacion.model.PayPal} interface instead.
	 */
	public static final String TABLE_NAME = "MT_PayPal";
	public static final Object[][] TABLE_COLUMNS = {
			{ "paypalUser", Types.VARCHAR },
			{ "paypalPassword", Types.VARCHAR },
			{ "paypalFirm", Types.VARCHAR },
			{ "paypalEmail", Types.VARCHAR },
			{ "configurationId", Types.BIGINT }
		};
	public static final String TABLE_SQL_CREATE = "create table MT_PayPal (paypalUser VARCHAR(75) null,paypalPassword VARCHAR(75) null,paypalFirm VARCHAR(75) null,paypalEmail VARCHAR(75) null,configurationId LONG not null primary key)";
	public static final String TABLE_SQL_DROP = "drop table MT_PayPal";
	public static final String ORDER_BY_JPQL = " ORDER BY payPal.configurationId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY MT_PayPal.configurationId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.com.alain.monetizacion.model.PayPal"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.com.alain.monetizacion.model.PayPal"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.com.alain.monetizacion.model.PayPal"));

	public PayPalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _configurationId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setConfigurationId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _configurationId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PayPal.class;
	}

	@Override
	public String getModelClassName() {
		return PayPal.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("paypalUser", getPaypalUser());
		attributes.put("paypalPassword", getPaypalPassword());
		attributes.put("paypalFirm", getPaypalFirm());
		attributes.put("paypalEmail", getPaypalEmail());
		attributes.put("configurationId", getConfigurationId());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		String paypalUser = (String)attributes.get("paypalUser");

		if (paypalUser != null) {
			setPaypalUser(paypalUser);
		}

		String paypalPassword = (String)attributes.get("paypalPassword");

		if (paypalPassword != null) {
			setPaypalPassword(paypalPassword);
		}

		String paypalFirm = (String)attributes.get("paypalFirm");

		if (paypalFirm != null) {
			setPaypalFirm(paypalFirm);
		}

		String paypalEmail = (String)attributes.get("paypalEmail");

		if (paypalEmail != null) {
			setPaypalEmail(paypalEmail);
		}

		Long configurationId = (Long)attributes.get("configurationId");

		if (configurationId != null) {
			setConfigurationId(configurationId);
		}
	}

	@Override
	public String getPaypalUser() {
		if (_paypalUser == null) {
			return StringPool.BLANK;
		}
		else {
			return _paypalUser;
		}
	}

	@Override
	public void setPaypalUser(String paypalUser) {
		_paypalUser = paypalUser;
	}

	@Override
	public String getPaypalPassword() {
		if (_paypalPassword == null) {
			return StringPool.BLANK;
		}
		else {
			return _paypalPassword;
		}
	}

	@Override
	public void setPaypalPassword(String paypalPassword) {
		_paypalPassword = paypalPassword;
	}

	@Override
	public String getPaypalFirm() {
		if (_paypalFirm == null) {
			return StringPool.BLANK;
		}
		else {
			return _paypalFirm;
		}
	}

	@Override
	public void setPaypalFirm(String paypalFirm) {
		_paypalFirm = paypalFirm;
	}

	@Override
	public String getPaypalEmail() {
		if (_paypalEmail == null) {
			return StringPool.BLANK;
		}
		else {
			return _paypalEmail;
		}
	}

	@Override
	public void setPaypalEmail(String paypalEmail) {
		_paypalEmail = paypalEmail;
	}

	@Override
	public long getConfigurationId() {
		return _configurationId;
	}

	@Override
	public void setConfigurationId(long configurationId) {
		_configurationId = configurationId;
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PayPal.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public PayPal toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PayPal)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PayPalImpl payPalImpl = new PayPalImpl();

		payPalImpl.setPaypalUser(getPaypalUser());
		payPalImpl.setPaypalPassword(getPaypalPassword());
		payPalImpl.setPaypalFirm(getPaypalFirm());
		payPalImpl.setPaypalEmail(getPaypalEmail());
		payPalImpl.setConfigurationId(getConfigurationId());

		payPalImpl.resetOriginalValues();

		return payPalImpl;
	}

	@Override
	public int compareTo(PayPal payPal) {
		long primaryKey = payPal.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PayPal)) {
			return false;
		}

		PayPal payPal = (PayPal)obj;

		long primaryKey = payPal.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PayPal> toCacheModel() {
		PayPalCacheModel payPalCacheModel = new PayPalCacheModel();

		payPalCacheModel.paypalUser = getPaypalUser();

		String paypalUser = payPalCacheModel.paypalUser;

		if ((paypalUser != null) && (paypalUser.length() == 0)) {
			payPalCacheModel.paypalUser = null;
		}

		payPalCacheModel.paypalPassword = getPaypalPassword();

		String paypalPassword = payPalCacheModel.paypalPassword;

		if ((paypalPassword != null) && (paypalPassword.length() == 0)) {
			payPalCacheModel.paypalPassword = null;
		}

		payPalCacheModel.paypalFirm = getPaypalFirm();

		String paypalFirm = payPalCacheModel.paypalFirm;

		if ((paypalFirm != null) && (paypalFirm.length() == 0)) {
			payPalCacheModel.paypalFirm = null;
		}

		payPalCacheModel.paypalEmail = getPaypalEmail();

		String paypalEmail = payPalCacheModel.paypalEmail;

		if ((paypalEmail != null) && (paypalEmail.length() == 0)) {
			payPalCacheModel.paypalEmail = null;
		}

		payPalCacheModel.configurationId = getConfigurationId();

		return payPalCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{paypalUser=");
		sb.append(getPaypalUser());
		sb.append(", paypalPassword=");
		sb.append(getPaypalPassword());
		sb.append(", paypalFirm=");
		sb.append(getPaypalFirm());
		sb.append(", paypalEmail=");
		sb.append(getPaypalEmail());
		sb.append(", configurationId=");
		sb.append(getConfigurationId());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("com.alain.monetizacion.model.PayPal");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>paypalUser</column-name><column-value><![CDATA[");
		sb.append(getPaypalUser());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paypalPassword</column-name><column-value><![CDATA[");
		sb.append(getPaypalPassword());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paypalFirm</column-name><column-value><![CDATA[");
		sb.append(getPaypalFirm());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>paypalEmail</column-name><column-value><![CDATA[");
		sb.append(getPaypalEmail());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>configurationId</column-name><column-value><![CDATA[");
		sb.append(getConfigurationId());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PayPal.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] { PayPal.class };
	private String _paypalUser;
	private String _paypalPassword;
	private String _paypalFirm;
	private String _paypalEmail;
	private long _configurationId;
	private PayPal _escapedModel;
}